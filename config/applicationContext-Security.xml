<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	
	<!-- 是忽略拦截某些资源的意思，主要是针对静态资源或默认登录页面 
		这是登录页面，所以不应该被拦截
	-->
	
	
	<!-- 自动配置模式，拦截所有请求，有ROLE_USER才可以通过 
		auto-config="true"，框架就会自动的配置多10个拦截器
	-->
	
	<!-- 不过滤图片、脚本等静态资源 -->
	<http pattern="/**/*.jpg" security="none"/>
	<http pattern="/**/*.png" security="none"/>
	<http pattern="/**/*.ico" security="none"/>
	<http pattern="/**/*.gif" security="none"/>
	<http pattern="/**/*.css" security="none"/>
	<http pattern="/**/*.js" security="none"/>
	<http pattern="/**/*.woff" security="none"/>
	
	
	<!-- 登录页面和忘记密码页面不过滤  -->
	<http pattern="/frontHome/index.jsp" security="none"/>  
	<http pattern="/frontHome/login.jsp" security="none"/>
	<http pattern="/jsp/forgotpassword.jsp" security="none"/>
	<http pattern="/common/*" security="none"></http>
	<http pattern="/upload/*" security="none"></http>
	<!-- auto-config="true" -->
	<http use-expressions="true" entry-point-ref="authenticationEntryPoint">
		<!-- 没有权限时候，跳转到指定页面 -->
		<access-denied-handler error-page="/frontHome/accessDenied.jsp"/>
		<!-- 退出系统 -->
		<!--  
		<logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp"/>
		-->
		<!-- 设置anonymousUser(匿名用户) 的访问权限 -->
		<anonymous enabled="true" key="doesNotMatter" granted-authority="ROLE_ANONYMOUS" 
			username="anonymousUser" />
		
		
		<!--  会话管理  -->
		<!--  invalid-session-url是配置会话失效转向地址；
			max-sessions是设置单个用户最大并行会话数；error-if-maximum-exceeded是配置当用户登录数达到最大时是否报错，
			设置为true时会报错且后登录的会话不能登录，默认为false不报错且将前一会话置为失效。
			invalid-session-url="/frontHome/timeout.jsp"
			-->
		<session-management  session-authentication-strategy-ref="sas" >
			<!-- 并行控制 -->
		</session-management>
		
		<csrf disabled="true"/>
		
		<!-- 
		<form-login login-page="/login.jsp"  
   					authentication-failure-url="/error.html"  
   					default-target-url="/index.jsp" /> 
   		 -->
   		
   		<!-- "记住我"功能，采用持久化策略（将用户的登录信息存放在数据库表中） 
   		暂时没有实现该功能
		<remember-me data-source-ref="dataSource" />  
		  -->  
		  
		<!-- 注销过滤器，前台,logoutFilter --> 
		<custom-filter ref="LogoutFilter" before="LOGOUT_FILTER"/>
		<!-- 注销过滤器，后台，替换默认的logoutFilter --> 
		<custom-filter ref="adminLogoutFilter" position="LOGOUT_FILTER"/>
		  
		    
		<!-- 检测失效的sessionId,超时时定位到另外一个URL  
			暂时没有实现该功能 
		<session-management invalid-session-url="/sessionTimeout.jsp" />  
		 -->   
		 <!-- 替换原有的SessionManagementFilter -->
		 <custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/> 
		  
		 <!-- 登录过滤器，前台 -->
		 <custom-filter ref="customLoginFilter" before="FORM_LOGIN_FILTER" />
		 <!-- 登录过滤器，后台，替换默认的LoginFilter -->
		 <custom-filter ref="customAdminLoginFilter" position="FORM_LOGIN_FILTER" />
		    
		 <!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前，  
		  实现用户、角色、权限、资源的数据库管理。  -->  
		 <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>
	
	<!-- 注销过滤器，完成前台，用户注销时的定向功能 -->
	<beans:bean id="LogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- 退出处理成功后的默认显示url -->
		<!--  
		<beans:constructor-arg index="0" value="/activitylogin.action"></beans:constructor-arg>
		-->
		<beans:constructor-arg index="0" value="/login.jsp"></beans:constructor-arg>
		<!-- 退出成功后的handler列表 -->
		<beans:constructor-arg index="1">
			<beans:list>
				<beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"></beans:bean>
			</beans:list>
		</beans:constructor-arg>
		<!-- 处理退出的虚拟url -->
		<beans:property name="filterProcessesUrl" value="/logout.action"></beans:property>
	</beans:bean>
	
	<!-- 注销过滤器，完成后台，用户注销时的定向功能 -->
	<beans:bean id="adminLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- 退出处理成功后的默认显示url -->
		<beans:constructor-arg index="0" value="/loginAdmin.action"></beans:constructor-arg>
		<beans:constructor-arg index="1">
			<!-- 退出成功后的handler列表 -->
			<beans:list>
				<beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"></beans:bean>
			</beans:list>
		</beans:constructor-arg>
		
		<!-- 处理退出的虚拟url -->
		<beans:property name="filterProcessesUrl" value="/logoutAdmin.action"></beans:property>
	</beans:bean>

	<!-- ConcurrentSessionFilter过滤器配置(主要设置账户session过期路径) -->
	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"></beans:constructor-arg>
		<!-- 修改之前的 
		<beans:constructor-arg name="expiredUrl" value="/frontHome/login.jsp"></beans:constructor-arg>
		-->
		<!-- session数量大于设定值的时候跳转至value处 -->
		<beans:constructor-arg name="expiredUrl" value="/error/remotelogin.jsp"></beans:constructor-arg>
	</beans:bean>
	<!-- 过期后跳转的url -->
	<!-- 
	<beans:bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry"></beans:property>
		
		<beans:property name="expiredUrl" value="/login.jsp"></beans:property>
	</beans:bean>
	 -->
	<!-- 配置sessionRegistry -->	
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"></beans:bean>
	<!-- 注入到UsernamePasswordAuthenticationFilter中，否则默认使用的是NullAuthenticatedSessionStrategy，
		则获取不到登录用户数  error-if-maximum-exceeded：若当前maximumSessions为1，当设置为true表示同一账户登录会抛出SessionAuthenticationException异常，
		异常信息为：Maximum sessions of {0} for this principal exceeded；  当设置为false时，不会报错，则会让同一账户最先认证的session过期。
		具体参考：ConcurrentSessionControlStrategy:onAuthentication() -->
	<beans:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<beans:constructor-arg ref="sessionRegistry"></beans:constructor-arg>
					<beans:property name="maximumSessions" value="1"></beans:property>
					<beans:property name="exceptionIfMaximumExceeded" value="false"></beans:property>
				</beans:bean>
				<beans:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
				</beans:bean>
				<beans:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<beans:constructor-arg ref="sessionRegistry"></beans:constructor-arg>
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	<!-- 认证过滤器,一个自定义的filter，必须包含authenticationManager,  
  		accessDecisionManager,securityMetadataSource三个属性。  --> 
  	
  	<beans:bean id="myFilter" class="cn.xaut.common.security.core.MyFilterSecurityInterceptor">
  		<!-- authenticationManager（验证管理器） -->
  		
  		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
  		<!-- accessDecisionManager（访问决策管理器） -->
  		<beans:property name="accessDecisionManager" ref="accessDecisionManager"></beans:property>
  		<!-- securityMetadataSource（安全访问数据源） -->
  		<beans:property name="securityMetadataSource" ref="securityMetadataSource"></beans:property>
  	</beans:bean>
  	
  	<!--  登录验证器,自定义的filter,拦截LoginFilter,验证前台用户  -->
  	<beans:bean id="customLoginFilter" class="cn.xaut.common.security.core.MyUsernamePasswordAuthenticationFilter">
  		<beans:property name="sessionAuthenticationStrategy" ref="sas" />
  		<!-- 校验登录是否有效的虚拟url -->
  		<!-- 验证成功后的处理 -->  
  		<beans:property name="filterProcessesUrl" value="/frontLogin.action"></beans:property>
  		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
  		<!-- 验证成功后的处理 -->
  		<beans:property name="authenticationSuccessHandler">
  			<!-- 自定义登录成功后的处理handler -->
  			<beans:bean class="cn.xaut.common.security.core.CustomLoginHandler">
  				<!-- 登录成功后的默认url -->
  				<!-- 
                <beans:property name="defaultTargetUrl" value="/Login!fromScanToViewActivityInfo.action" />
  				 -->
  				 <!-- 
  				<beans:property name="defaultTargetUrl" value="/userinfoAction_login.do" />
  				 -->
  				 <beans:property name="defaultTargetUrl" value="/userLoginAction_login.do" />
  			</beans:bean>
  		</beans:property>
  		<!-- 验证失败后的处理 -->
  		<beans:property name="authenticationFailureHandler">
             <beans:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                 <!-- 登录失败后的默认Url -->
                 <!-- 
                 <beans:property name="defaultFailureUrl" value="/frontHome/login.jsp" />
                  -->
                  <!--  
                  <beans:property name="defaultFailureUrl" value="/Login!execute.action" />
             	-->
             	<beans:property name="defaultFailureUrl" value="/userinfoAction_loginFailure.do" />
             	
             
             </beans:bean>
         </beans:property>
         <!-- 注入相应的service 
         <beans:property name="userService" ref="userService"></beans:property>
         -->
  	</beans:bean>
  	
  	<!-- 登录过滤器，验证后台用户 -->
  	<beans:bean id="customAdminLoginFilter" class="cn.xaut.common.security.core.MyUsernamePasswordAuthenticationFilter">
  		<beans:property name="sessionAuthenticationStrategy" ref="sas" />
  		<!-- 校验登录是否有效的虚拟url -->
  		<!-- 验证成功后的处理 -->  
  		<beans:property name="filterProcessesUrl" value="/endloginAction.action"></beans:property>
  		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
  		<!--  
  		<beans:property name="accountParameter" value="account"></beans:property>
  		<beans:property name="passwordParameter" value="password"></beans:property>
  		-->
  		<!-- 验证成功后的处理 -->
  		<beans:property name="authenticationSuccessHandler">
  			<!-- 自定义登录成功后的处理handler -->
  			<beans:bean class="cn.xaut.common.security.core.CustomEndLoginHandler">
  				<!-- 登录成功后的默认url -->
  				<!-- 
                <beans:property name="defaultTargetUrl" value="/jumpToIndexAdmin.action" />
                 -->
                <beans:property name="defaultTargetUrl" value="/myLoginAction_goIndexAdmin.action" />
  			</beans:bean>
  		</beans:property>
  		<!-- 验证失败后的处理 -->
  		<beans:property name="authenticationFailureHandler">
             <beans:bean
                 class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                 <!-- 登录失败后的默认Url -->
                 <beans:property name="defaultFailureUrl" value="/myLoginAction_execute.action" />
             </beans:bean>
         </beans:property>
         <!-- 注入相应的service 
         <beans:property name="userService" ref="userService"></beans:property>
         -->
  	</beans:bean>
  	
  	<!-- 注意能够为authentication-manager 设置alias别名  --> 
  	<authentication-manager alias="authenticationManager">
  		<authentication-provider user-service-ref="userDetailsManager">
  			<!-- 
  			<password-encoder ref="passwordEncoder">
  				<salt-source user-property="username"/>
  			</password-encoder>
  			 -->
  		</authentication-provider>
  	</authentication-manager>
  	
  	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 --> 
  	<beans:bean id="accessDecisionManager" class="cn.xaut.common.security.core.MyAccessDecisionManager"></beans:bean>
  	
  	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
  	<!---->
  	<beans:bean id="securityMetadataSource" class="cn.xaut.common.security.core.MyInvocationSecurityMetadataSourceService">
  		  <beans:constructor-arg name="authorityService" ref="authorityService"></beans:constructor-arg> 
  	</beans:bean>
  	
	<beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
    	<beans:constructor-arg value="/login.jsp" />
	</beans:bean> 
	

	<!-- 认证管理器。用户名密码都集成在配置文件中  
	<authentication-manager>
		<authentication-provider>
			<user-service>
			  <user name="jimi" password="jimispassword" authorities="ROLE_USER, ROLE_ADMIN" />
			  <user name="bob" password="bobspassword" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	-->
</beans:beans>